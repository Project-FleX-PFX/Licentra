<%# views/admin/product_management.erb %>
<% @title = "Product Management" %>
<% @css   = "management" %>

<h1>Product Management</h1>
<p class="page-description">Manage your products and their licenses.</p>

<div class="cards-container">
  <% @products.each do |p| %>
    <div class="card product-card"
         data-product_id="<%= p.product_id %>"
         data-product_name="<%= p.product_name %>"
         data-license_count="<%= p.licenses.count %>">
      <h2><%= Rack::Utils.escape_html(p.product_name) %></h2>
      <p><strong>Licenses:</strong> <%= p.licenses.count %></p>
      <button class="button-primary product-edit-btn">Configure</button>
    </div>
  <% end %>

  <!-- "Add Product" Card -->
  <div class="card add-product-card" id="add-product-btn">
    <div class="add-icon">+</div>
    <h2>Add New Product</h2>
  </div>
</div>

<!-- Modal für Add/Edit -->
<div id="product-modal" class="modal hidden">
  <div class="modal-content">
    <span class="close-btn" title="Schließen">&times;</span>
    <h2 id="modal-title">Product configuration</h2>
    <form id="product-form">
      <label>Name:</label>
      <input type="text" name="product_name" disabled>

      <div id="license-info-container" style="display: none;">
        <div class="info-field">
          <span class="info-label">Number of sub licenses:</span>
          <span id="license-count-display">0</span>
        </div>
      </div>

      <div class="modal-actions">
        <button type="button" id="edit-btn">Edit</button>
        <button type="submit" id="save-btn" disabled>Save</button>
        <button type="button" id="delete-btn" class="delete-btn">Delete</button>
      </div>
    </form>
  </div>
</div>

<div id="delete-confirmation-modal" class="modal hidden">
  <div class="modal-content">
    <span class="close-btn">&times;</span>
    <h3>Produkt wirklich löschen?</h3>
    <p>Möchten Sie das Produkt <strong id="delete-product-name"></strong> wirklich löschen?</p>
    <button id="confirm-delete-btn" class="btn btn-danger">Löschen</button>
    <button id="cancel-delete-btn" class="btn btn-secondary">Abbrechen</button>
  </div>
</div>


<script>

    document.addEventListener("DOMContentLoaded", () => {
        const productCards = document.querySelectorAll(".product-card");
        const modal = document.getElementById("product-modal");
        const deleteConfirmModal = document.getElementById('delete-confirmation-modal');
        const deleteConfirmCloseBtn = deleteConfirmModal.querySelector('.close-btn');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
        const deleteProductNameSpan = document.getElementById('delete-product-name');
        const closeBtn = modal.querySelector(".close-btn");
        const form = document.getElementById("product-form");
        const editBtn = document.getElementById("edit-btn");
        const saveBtn = document.getElementById("save-btn");
        const deleteBtn = document.getElementById("delete-btn");
        const title = document.getElementById("modal-title");
        const licenseCountDisplay = document.getElementById("license-count-display");

        function openModal(mode, data={}) {
            title.textContent = mode === 'add'
                ? 'Add new Product'
                : 'Product configuration';

            // Felder mit Daten befüllen (oder leer lassen beim "add")
            form.product_name.value = data.product_name || '';

            // License info container nur im Edit-Modus anzeigen
            const licenseInfoContainer = document.getElementById('license-info-container');
            licenseInfoContainer.style.display = mode === 'edit' ? 'block' : 'none';

            // Lizenzanzahl als Text anzeigen
            if (mode === 'edit') {
                licenseCountDisplay.textContent = data.license_count || '0';
            }

            // Inputs sperren
            [...form.elements].forEach(el => {
                if (['edit-btn','save-btn','delete-btn'].includes(el.id)) return;
                el.disabled = mode === 'edit'; // Felder nur im Edit-Modus sperren
            });

            saveBtn.disabled = mode === 'edit';
            deleteBtn.style.display = mode === 'edit' ? 'inline-block' : 'none';
            editBtn.style.display = mode === 'add' ? 'none' : 'inline-block';

            // Aktives Element markieren
            document.querySelectorAll('.product-card').forEach(card => {
                card.classList.remove('active');
            });

            if (mode === 'edit') {
                const clickedCard = document.querySelector(`.product-card[data-product_name="${data.product_name}"]`);
                if (clickedCard) clickedCard.classList.add('active');
            }

            modal.classList.remove("hidden");
        }

        // Event-Listener für Produkt-Karten
        productCards.forEach(card => {
            const editBtn = card.querySelector('.product-edit-btn');
            editBtn.addEventListener("click", (e) => {
                e.stopPropagation(); // Verhindert Bubbling zum Card-Click
                openModal('edit', card.dataset);
            });

            // Optional: Auch die Karte selbst klickbar machen
            card.addEventListener("click", () => {
                openModal('edit', card.dataset);
            });
        });

        // "Add Product" Karte
        document.getElementById("add-product-btn")
            .addEventListener("click", () => openModal('add'));

        let isEditMode = false;

        closeBtn.addEventListener("click", () => {
            modal.classList.add("hidden");
            // Zustand zurücksetzen
            isEditMode = false;
            editBtn.textContent = "Edit";
            editBtn.classList.remove("cancel-btn");
        });

        editBtn.addEventListener("click", () => {
            isEditMode = !isEditMode;

            if (isEditMode) {
                // Wechsel zu Edit-Modus
                editBtn.textContent = "Cancel";
                editBtn.classList.add("cancel-btn");

                // Felder entsperren
                [...form.elements].forEach(el => {
                    if (['edit-btn','delete-btn'].includes(el.id)) return;
                    el.disabled = false;
                });
                saveBtn.disabled = false;
            } else {
                // Wechsel zurück zum Ansichtsmodus
                editBtn.textContent = "Edit";
                editBtn.classList.remove("cancel-btn");

                // Felder wieder sperren
                [...form.elements].forEach(el => {
                    if (['edit-btn','delete-btn'].includes(el.id)) return;
                    el.disabled = true;
                });
                saveBtn.disabled = true;
            }
        });

        deleteBtn.disabled = false;
        deleteBtn.title = "";

        deleteBtn.addEventListener('click', () => {
            // Produktname im Bestätigungsmodal anzeigen
            const activeCard = document.querySelector('.product-card.active');
            if (!activeCard) {
                return;
            }
            const productName = activeCard.dataset.product_name || 'unbekanntes Produkt';
            deleteProductNameSpan.textContent = productName;

            // Bestätigungsmodal anzeigen
            deleteConfirmModal.classList.remove('hidden');
        });

        // Modal schließen (X-Button und Abbrechen)
        deleteConfirmCloseBtn.addEventListener('click', () => {
            deleteConfirmModal.classList.add('hidden');
        });

        cancelDeleteBtn.addEventListener('click', () => {
            deleteConfirmModal.classList.add('hidden');
        });

        // Löschbestätigung: DELETE-Request an Backend senden
        confirmDeleteBtn.addEventListener('click', () => {
            const activeCard = document.querySelector('.product-card.active');
            if (!activeCard) {
                deleteConfirmModal.classList.add('hidden');
                return;
            }
            const productId = activeCard.dataset.product_id;
            if (!productId) {
                deleteConfirmModal.classList.add('hidden');
                return;
            }

            fetch(`/product_management/${productId}`, {
                method: 'DELETE',
            })
                .then(response => {
                    deleteConfirmModal.classList.add('hidden');
                    if (response.ok) {
                        modal.classList.add('hidden');
                        window.location.reload();
                    } else {
                        // Bei Fehler lassen wir das Backend die Fehlermeldung via Flash anzeigen
                        window.location.reload();
                    }
                })
                .catch(() => {
                    // Bei Netzwerkfehlern einfach neu laden, um Flash-Nachrichten zu sehen
                    deleteConfirmModal.classList.add('hidden');
                    window.location.reload();
                });
        });

        form.addEventListener("submit", e => {
            e.preventDefault();

            // Ziel-URL und Methode bestimmen
            let url = '/product_management';
            let method = 'POST';
            let bodyParams = { 'product_name': form.product_name.value };

            if (!title.textContent.includes('Add new Product')) {
                // Update-Fall
                const productId = document.querySelector('.product-card.active')?.dataset.product_id;
                if (!productId || productId === 'undefined') {
                    return;
                }
                url = `/product_management/${productId}`;
                method = 'PUT';
            }

            // Fetch-Aufruf
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams(bodyParams)
            })
                .then(response => {
                    if (response.ok) {
                        modal.classList.add("hidden");
                        window.location.reload();
                    } else {
                        // Bei Fehler lassen wir das Backend die Fehlermeldung via Flash anzeigen
                        window.location.reload();
                    }
                })
                .catch(() => {
                    // Bei Netzwerkfehlern einfach neu laden, um Flash-Nachrichten zu sehen
                    window.location.reload();
                });
        });
    });

</script>
